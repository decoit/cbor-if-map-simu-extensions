/*
 * No license defined yet.
 */
package de.decoit.simu.cbor.ifmap.simu.identifier;

import co.nstant.in.cbor.CborBuilder;
import co.nstant.in.cbor.CborEncoder;
import co.nstant.in.cbor.builder.ArrayBuilder;
import de.decoit.simu.cbor.ifmap.simu.AbstractSimuTestBase;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;
import javax.xml.bind.DatatypeConverter;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import static org.junit.Assert.*;


/**
 *
 * @author Thomas Rix (rix@decoit.de)
 */
@Slf4j
public class CBORVulnerabilityTest extends AbstractSimuTestBase {
	private final String administrativeDomain = "simu-adm";
	private final String id = "vuln-id";
	private final String type = "vuln-type";
	private final Double severity = 42.0;
	private final String id2 = "vuln-id-2";
	private final String type2 = "vuln-type-2";
	private final Double severity2 = 21.0;


	@Test
	public void testConstructor() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, id);
		
		assertEquals(type, instance.getType());
		assertEquals(id, instance.getId());
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_null_String_String() {
		CBORVulnerability instance = new CBORVulnerability(null, type, id);
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_EmptyString_String_String() {
		CBORVulnerability instance = new CBORVulnerability("", type, id);
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_Whitespaces_String_String() {
		CBORVulnerability instance = new CBORVulnerability("   ", type, id);
	}
	
	
	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_String_null_String() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, null, id);
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_String_EmptyString_String() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, "", id);
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_String_Whitespaces_String() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, "   ", id);
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_String_String_null() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, null);
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_String_String_EmptyString() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, "");
	}


	@Test(expected = IllegalArgumentException.class)
	public void testConstructor_String_String_Whitespaces() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, "   ");
	}


	@Test
	public void testSetSeverity() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, id);
		instance.setSeverity(severity);
		
		assertEquals(severity, instance.getSeverity());
	}


	@Test
	public void testSetSeverity_null() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, id);
		instance.setSeverity(severity);
		instance.setSeverity(null);
		
		assertNull(instance.getSeverity());
	}


	@Test
	public void testSetSeverity_NegativeDouble() {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, id);
		instance.setSeverity(-42.0);
		
		assertEquals(Double.valueOf(-42.0), instance.getSeverity());
	}


	@Test
	public void testCborSerialize() throws Exception {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, id);

		CborBuilder cb = new CborBuilder();
		ArrayBuilder ab = cb.addArray();

		instance.cborSerialize(ab);

		ab.end();

		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		CborEncoder ce = new CborEncoder(bos);
		ce.encode(cb.build());

		log.info("CBOR serialize:");
		log.info(DatatypeConverter.printHexBinary(bos.toByteArray()));

		byte[] expResult = DatatypeConverter.parseHexBinary("8404D9A4100286006873696D752D61646D026776756C6E2D6964016976"
				+ "756C6E2D7479706580");

		assertTrue("Byte array mismatch", Arrays.equals(expResult, bos.toByteArray()));
	}
	
	
	@Test
	public void testCborSerialize_full() throws Exception {
		CBORVulnerability instance = new CBORVulnerability(administrativeDomain, type, id);
		instance.setSeverity(severity);

		CborBuilder cb = new CborBuilder();
		ArrayBuilder ab = cb.addArray();

		instance.cborSerialize(ab);

		ab.end();

		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		CborEncoder ce = new CborEncoder(bos);
		ce.encode(cb.build());

		log.info("CBOR serialize (full):");
		log.info(DatatypeConverter.printHexBinary(bos.toByteArray()));

		byte[] expResult = DatatypeConverter.parseHexBinary("8404D9A4100288006873696D752D61646D026776756C6E2D6964016976"
				+ "756C6E2D7479706503FB404500000000000080");

		assertTrue("Byte array mismatch", Arrays.equals(expResult, bos.toByteArray()));
	}


	@Test
	public void testEquals_False() throws Exception {
		CBORVulnerability instance1 = new CBORVulnerability(administrativeDomain, type, id);
		CBORVulnerability instance2 = new CBORVulnerability(administrativeDomain, type2, id2);

		assertFalse(instance1.equals(instance2));
	}


	@Test
	public void testEquals_True() throws Exception {
		CBORVulnerability instance1 = new CBORVulnerability(administrativeDomain, type, id);
		CBORVulnerability instance2 = new CBORVulnerability(administrativeDomain, type, id);

		assertTrue(instance1.equals(instance2));
	}


	@Test
	public void testEquals_False_full() throws Exception {
		CBORVulnerability instance1 = new CBORVulnerability(administrativeDomain, type, id);
		instance1.setSeverity(severity);

		CBORVulnerability instance2 = new CBORVulnerability(administrativeDomain, type2, id2);
		instance2.setSeverity(severity2);

		assertFalse(instance1.equals(instance2));
	}


	@Test
	public void testEquals_True_full() throws Exception {
		CBORVulnerability instance1 = new CBORVulnerability(administrativeDomain, type, id);
		instance1.setSeverity(severity);

		CBORVulnerability instance2 = new CBORVulnerability(administrativeDomain, type, id);
		instance2.setSeverity(severity);

		assertTrue(instance1.equals(instance2));
	}


	@Test
	public void testEquals_OtherClass() {
		CBORVulnerability instance1 = new CBORVulnerability(administrativeDomain, type, id);
		Integer instance2 = 42;

		assertFalse(instance1.equals(instance2));
	}
}
