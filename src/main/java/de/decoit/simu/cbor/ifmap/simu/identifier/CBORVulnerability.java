/* 
 * Copyright 2015 DECOIT GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.decoit.simu.cbor.ifmap.simu.identifier;

import co.nstant.in.cbor.model.DataItem;
import co.nstant.in.cbor.model.DoublePrecisionFloat;
import co.nstant.in.cbor.model.UnicodeString;
import de.decoit.simu.cbor.ifmap.identifier.extended.AbstractExtendedIdentifier;
import de.decoit.simu.cbor.ifmap.simu.util.SimuNamespaces;
import java.util.HashMap;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;



/**
 * Java representation of the vulnerability extended identifier from the SIMU namespace.
 *
 * @author Thomas Rix (rix@decoit.de)
 */
@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
@Slf4j
public class CBORVulnerability extends AbstractExtendedIdentifier {
	public static final String XML_NAME = "vulnerability";
	public static final String TYPE = "type";
	public static final String ID = "id";
	public static final String SEVERITY = "severity-score";


	/**
	 * Create a new vulnerability extended identifier.
	 *
	 * @param administrativeDomain Vulnerability administrative domain
	 * @param type Vulnerability type
	 * @param id Vulnerability ID
	 */
	public CBORVulnerability(String administrativeDomain, String type, String id) {
		super(SimuNamespaces.SIMU, XML_NAME, administrativeDomain, new HashMap<>(), new HashMap<>());

		if(StringUtils.isBlank(type)) {
			throw new IllegalArgumentException("Type must not be blank");
		}

		if(StringUtils.isBlank(id)) {
			throw new IllegalArgumentException("ID must not be blank");
		}

		DataItem typeDi = new UnicodeString(type);
		this.attributes.put(TYPE, typeDi);

		DataItem idDi = new UnicodeString(id);
		this.attributes.put(ID, idDi);
	}


	/**
	 * Set the severity rating for this identifier.
	 * The severity may be null to remove this attribute from the identifier.
	 *
	 * @param severity Severity rating
	 */
	public void setSeverity(Double severity) {
		if(severity != null) {
			DataItem severityDi = new DoublePrecisionFloat(severity);
			this.attributes.put(SEVERITY, severityDi);
		}
		else {
			this.attributes.remove(SEVERITY);
		}
	}


	public String getType() {
		UnicodeString us = (UnicodeString) this.attributes.get(TYPE);
		return us.getString();
	}


	public String getId() {
		UnicodeString us = (UnicodeString) this.attributes.get(ID);
		return us.getString();
	}


	public Double getSeverity() {
		DoublePrecisionFloat dpf = (DoublePrecisionFloat) this.attributes.get(SEVERITY);

		if(dpf != null) {
			return dpf.getValue();
		}
		else {
			return null;
		}
	}
}
